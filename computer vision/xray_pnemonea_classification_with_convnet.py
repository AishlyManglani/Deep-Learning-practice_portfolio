# -*- coding: utf-8 -*-
"""Xray pnemonea classification with convnet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tlnHYeNAjLnGzhhYFweFMR95R9nyoky6
"""

# ============================================
# 1. Install & Import Libraries
# ============================================
!pip install -q tensorflow tensorflow_hub tensorflow_datasets

import tensorflow as tf
import tensorflow_hub as hub
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt

# ============================================
# 2. Load Pneumonia MNIST Dataset
# ============================================
(train_ds, val_ds, test_ds), ds_info = tfds.load(
    'pneumonia_mnist',
    split=['train[:80%]', 'train[80%:90%]', 'train[90%:]'],
    as_supervised=True,
    with_info=True
)

NUM_CLASSES = 2
BATCH_SIZE = 32
IMG_SIZE = (224, 224)

# ============================================
# 3. Preprocessing
# ============================================
def preprocess(image, label):
    image = tf.image.resize(image, IMG_SIZE)
    image = tf.image.grayscale_to_rgb(image)  # Expand channels for CNNs expecting RGB
    image = tf.cast(image, tf.float32) / 255.0
    return image, label

train_ds = train_ds.map(preprocess).shuffle(1000).batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)
val_ds = val_ds.map(preprocess).batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)
test_ds = test_ds.map(preprocess).batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)

# ============================================
# 4. Build Simple CNN Model
# ============================================
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(224,224,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')  # Binary classification
])

model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)

# ============================================
# 5. Train the Model
# ============================================
EPOCHS = 5

history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=EPOCHS
)

# ============================================
# 5. Visualize Training Results
# ============================================
plt.plot(history.history['accuracy'], label='train accuracy')
plt.plot(history.history['val_accuracy'], label='val accuracy')
plt.title('Training and Validation Accuracy (X-ray Pneumonia)')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

# ============================================
# 6. Evaluate
# ============================================
test_loss, test_acc = model.evaluate(test_ds)
print(f"âœ… Test Accuracy on Pneumonia MNIST: {test_acc:.2f}")